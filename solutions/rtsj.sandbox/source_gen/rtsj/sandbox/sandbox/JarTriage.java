package rtsj.sandbox.sandbox;

/*Generated by MPS */

import javax.realtime.RealtimeThread;
import javax.realtime.PriorityParameters;
import javax.realtime.PeriodicParameters;
import javax.realtime.RelativeTime;

public class JarTriage {
  public static final double TOLERANCE_FRACTION = 0.02;
  public static final long TRIAGE_THREAD_SCOPE_SIZE_BYTES = 1024 * 100;
  public static final int NUMBER_OF_POOL_THREADS_PER_PRODUCTION_LINE = 10;

  private final AuditLog log;
  /*package*/ JarTriage.TriageRunnable head;
  private WorkerConsole console;
  private volatile boolean stopFlag = false;
  private int maximumNumberOfThreads = 0;
  private int minimumNumberOfThreads = NUMBER_OF_POOL_THREADS_PER_PRODUCTION_LINE;
  private int currentNumberOfThreads = 0;

  public JarTriage(AuditLog log, WorkerConsole console) {
    this.log = log;
    this.console = console;
    initialisePool();
  }

  public void initialisePool() {
    for (int i = 0; i < NUMBER_OF_POOL_THREADS_PER_PRODUCTION_LINE; i++) {
      JarTriage.TriageRunnable r = new JarTriage.TriageRunnable();
      new RealtimeThread(new PriorityParameters(1), new PeriodicParameters(new RelativeTime(0, 0), new RelativeTime(0, 0), new RelativeTime(0, 0), new RelativeTime(0, 0), null, null), null, MainDefinition.getMemory("immortalMemory"), null, r).start();
    }
  }

  public class TriageRunnable implements Runnable {
    public TriageRunnable() {
    }

    public void run() {
    }
  }
}

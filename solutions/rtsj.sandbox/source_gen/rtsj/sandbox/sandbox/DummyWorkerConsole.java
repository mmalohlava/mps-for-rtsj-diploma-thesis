package rtsj.sandbox.sandbox;

/*Generated by MPS */

import java.util.concurrent.atomic.AtomicLong;

public class DummyWorkerConsole implements WorkerConsole {
  public static final long CALL_SNOOZE_TIME_MILLIS = 3000;

  private final AtomicLong overfilledCounter = new AtomicLong(0L);
  private final AtomicLong underfilledCounter = new AtomicLong(0L);

  public DummyWorkerConsole() {
  }

  public long getTotalJarsUnderfilled(long jarId) {
    return underfilledCounter.get();
  }

  public long getTotalJarsOverfilled(long jarId) {
    return overfilledCounter.get();
  }

  public void jarUnderfilled(long jarId) {
    System.err.println(System.currentTimeMillis() + ": Jar " + jarId + " underfilled");

    underfilledCounter.incrementAndGet();

    snooze();
  }

  public void jarOverfilled(long jarId) {
    System.err.println(System.currentTimeMillis() + ": Jar " + jarId + " overfilled");

    overfilledCounter.incrementAndGet();

    snooze();
  }

  private void snooze() {
    try {
      Thread.sleep(CALL_SNOOZE_TIME_MILLIS);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }
}

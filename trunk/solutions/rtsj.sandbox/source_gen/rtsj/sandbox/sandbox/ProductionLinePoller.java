package rtsj.sandbox.sandbox;

/*Generated by MPS */


public class ProductionLinePoller implements Runnable {
  public static final long ERROR_WAIT_TIME_MILLIS = 30;
  public static final int POLLER_THREAD_SCOPE_SIZE_BYTES = 1024 * 100;

  private final JarTriage triage;
  private final ProductionLine line;
  private final MeasurementManager objectPool;
  private boolean stop = false;
  private final ProductionLinePoller.ScopedPollingRunnable scopedRunnable = new ProductionLinePoller.ScopedPollingRunnable();

  public ProductionLinePoller(ProductionLine line, MeasurementManager objectPool, JarTriage triagePool) {
    this.line = line;
    this.objectPool = objectPool;
    this.triage = triagePool;
  }

  public void run() {
    while (!(stop)) {
      poll();
    }
  }

  private void poll() {
    Measurement m = null;

    m = objectPool.getMeasurement();

    while (m == null) {
      /*
        MainDefinition.getMemory("").enter(new Runnable() {
          public void run() {
            System.err.println("Error: measurement pool exhausted");
          }
        });
      */

      try {
        Thread.sleep(ERROR_WAIT_TIME_MILLIS);
      } catch (InterruptedException e) {
      }
    }

    // scope.enter(scopeRunnable); 

    m.set(scopedRunnable.jarId, scopedRunnable.mass, line.getSweetType(), line.getJarType(), System.currentTimeMillis());

    triage.measurementTaken(m);
  }

  public class ScopedPollingRunnable implements Runnable {
    public int mass;
    public long jarId;

    public ScopedPollingRunnable() {
    }

    public void run() {
      mass = line.getWeighingMachine().weighJarGrams();
      jarId = line.getLastJarId();
    }
  }
}

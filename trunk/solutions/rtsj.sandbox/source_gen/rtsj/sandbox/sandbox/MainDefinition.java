package rtsj.sandbox.sandbox;

/*Generated by MPS */

import java.util.HashMap;
import javax.realtime.RealtimeThread;
import javax.realtime.MemoryArea;
import javax.realtime.RawMemoryAccess;
import javax.realtime.ImmortalMemory;
import javax.realtime.ScopedMemory;
import java.io.PrintWriter;
import java.io.StringWriter;

public class MainDefinition {
  private static final String WEDGE_THREAD_NAME_SUFFIX = "WedgeThread";
  private static HashMap<String, RealtimeThread> threads = new HashMap<String, RealtimeThread>();
  private static HashMap<String, MemoryArea> memories = new HashMap<String, MemoryArea>();
  private static HashMap<String, RawMemoryAccess> rawMemories = new HashMap<String, RawMemoryAccess>();
  private static HashMap<String, InterThreadChannel> channels = new HashMap<String, InterThreadChannel>();
  private static HashMap<String, ObjectPoolI> objectPools = new HashMap<String, ObjectPoolI>();

  public MainDefinition() {
  }

  public static void main(String[] argc) {


    allocateMemory("immortalMemory", ImmortalMemory.instance(), false);

    initThreads();
    initChannels();
    initObjectPools();





  }

  public static Object allocateVariable(String memoryName, Class clazz) {
    Object variable = null;
    try {
      variable = getMemory(memoryName).newInstance(clazz);
    } catch (IllegalAccessException e) {
      killProgram(e);
    } catch (InstantiationException e) {
      killProgram(e);
    }
    return variable;
  }

  public static Object allocaArray(String memoryName, Class clazz, int count) {
    Object array = null;
    array = getMemory(memoryName).newArray(clazz, count);
    return array;
  }

  public static void allocateMemory(String name, MemoryArea memoryArea, boolean initWedgeThread) {
    if (memories.containsKey(name)) {
      killProgram("MemoryArea with name " + name + " already exists");
    }

    if (initWedgeThread) {
      initWedgeThread(name, (ScopedMemory) memoryArea);
    }

    memories.put(name, memoryArea);
  }

  private static void initWedgeThread(String memoryName, ScopedMemory memory) {
    String name = memoryName + WEDGE_THREAD_NAME_SUFFIX;

    WedgeThread thread = new WedgeThread();
    thread.setMemory(memory);

    threads.put(name, thread);
  }

  public static void startWedgeThread(String memory) {
    String name = memory + WEDGE_THREAD_NAME_SUFFIX;

    if (!(threads.containsKey(name))) {
      killProgram("ScopedMemory " + memory + " has not wedge thread");
    }

    RealtimeThread thread = threads.get(name);
    thread.run();
    try {
      thread.join();
    } catch (InterruptedException e) {
      // ignore 
    }
  }

  public static void stopwedgeThread(String memory) {
    String name = memory + WEDGE_THREAD_NAME_SUFFIX;

    if (!(threads.containsKey(name))) {
      killProgram("ScopedMemory " + memory + " has not wedge thread");
    }

    threads.get(name).interrupt();
  }

  public static void initObjectPools() {
  }

  public static ObjectPoolI getObjectPool(String name) {
    ObjectPoolI objectPool = objectPools.get(name);
    if (objectPool == null) {
      killProgram("ObjectPool " + name + " does not exist.");
    }
    return objectPool;
  }

  public static void freeObjectFromOP(Object object) throws Exception {
    if (object instanceof ObjectPoolElement) {
      ((ObjectPoolElement) object).getObjectPool().free(object);
    } else {
      throw new Exception("Object is not from ObjectPool");
    }
  }

  public static MemoryArea getMemory(String name) {
    MemoryArea memory = memories.get(name);
    if (memory == null) {
      killProgram("MemoryArea " + name + " does not exist.");
    }
    return memory;
  }

  public static void allocateRawMemoryAccess(String name, RawMemoryAccess rawMemoryAccess) {
    rawMemories.put(name, rawMemoryAccess);
  }

  public static RawMemoryAccess getRawMemoryAccess(String name) {
    RawMemoryAccess memory = rawMemories.get(name);
    if (memory == null) {
      killProgram("RawMemory " + name + " does not exist.");
    }
    return memory;
  }

  private static void initThreads() {

  }

  public static RealtimeThread getThread(String name) {
    RealtimeThread thread = threads.get(name);
    if (thread == null) {
      killProgram("RelatimeThread " + name + " does not exist.");
    }
    return thread;
  }

  public static void initChannels() {
  }

  public static InterThreadChannel getChannel(String name) {
    return channels.get(name);
  }

  public static void killProgram(String message) {
    System.err.print(message);
    System.exit(0);
  }

  public static void killProgram(Exception e) {
    System.err.print(getStack(e));
    System.exit(0);
  }

  public static String getStack(Exception e) {
    PrintWriter printWriter = new PrintWriter(new StringWriter());
    e.printStackTrace(printWriter);
    return printWriter.toString();
  }
}

package rtsj.sandbox.sandbox;

/*Generated by MPS */

import java.util.concurrent.atomic.AtomicLong;
import java.util.Random;

public class DummyProductionLine implements ProductionLine {
  private static final AtomicLong jarIdCounte = new AtomicLong(0L);

  private final short jarType;
  private final short sweetType;
  private final long periodMillis;
  private final int targetMass;
  private final int jarMass;
  private final double tolerance;
  private long lastPollTime = -1;
  private long lastJarId;
  private final AtomicLong missedCounter = new AtomicLong(0L);
  private final WeighingMachine weighingMachine = new DummyProductionLine.DummyWeighingMachine();

  public DummyProductionLine(short jarType, short sweetType, long periodMillis) {
    this.jarType = jarType;
    this.sweetType = sweetType;
    this.periodMillis = periodMillis;

    targetMass = SweetData.massOfEachSweetGrams(sweetType) * SweetData.targetNumberOfSweetsPerJar(sweetType, jarType);

    jarMass = JarData.massOfJarGrams(jarType);

    tolerance = 0.02 * targetMass;
  }

  public long getNumberOfJarsMissed() {
    return missedCounter.get();
  }

  public long getLastJarId() {
    return lastJarId;
  }

  public WeighingMachine getWeighingMachine() {
    return weighingMachine;
  }

  public short getSweetType() {
    return sweetType;
  }

  public short getJarType() {
    return jarType;
  }

  private void generateJarId() {
    lastJarId = jarIdCounte.incrementAndGet();
  }

  private class DummyWeighingMachine implements WeighingMachine {
    private final Random random = new Random();

    public DummyWeighingMachine() {
    }

    public int weighJarGrams() {
      waitForNextJar();

      return generateNextMass();
    }

    private int generateNextMass() {
      double gaussian = random.nextGaussian();

      double mass = ((tolerance * gaussian) / 3) + targetMass + jarMass;

      generateJarId();

      return ((int) Math.round(mass));
    }

    private void waitForNextJar() {
      if (lastPollTime == -1) {
        // firt pass, do not sleep 
      } else {
        long delaySinceLastPoll = System.currentTimeMillis() - lastPollTime;

        if (delaySinceLastPoll > periodMillis) {
          int numberMissed = ((int) Math.floor(((double) delaySinceLastPoll) / ((double) periodMillis)));

          System.err.print(System.currentTimeMillis() + ": Missed " + numberMissed + " jar!");

          for (int i = 0; i < numberMissed; i++) {
            generateJarId();
          }

          missedCounter.addAndGet(numberMissed);
        } else {
          long remainder = periodMillis - delaySinceLastPoll;

          try {
            Thread.sleep(remainder);
          } catch (InterruptedException e) {
            e.printStackTrace();
          }
        }
      }

      lastPollTime = System.currentTimeMillis();
    }
  }
}

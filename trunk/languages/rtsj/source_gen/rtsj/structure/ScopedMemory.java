package rtsj.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ScopedMemory extends MemoryArea {
  public static final String concept = "rtsj.structure.ScopedMemory";
  public static final String TYPE = "type";
  public static final String INITIAL = "initial";
  public static final String MAXIMAL = "maximal";

  public ScopedMemory(SNode node) {
    super(node);
  }

  public ScopedMemoryType getType() {
    String value = super.getProperty(ScopedMemory.TYPE);
    return ScopedMemoryType.parseValue(value);
  }

  public void setType(ScopedMemoryType value) {
    super.setProperty(ScopedMemory.TYPE, value.getValueAsString());
  }

  public Expression getInitial() {
    return (Expression) this.getChild(Expression.class, ScopedMemory.INITIAL);
  }

  public void setInitial(Expression node) {
    super.setChild(ScopedMemory.INITIAL, node);
  }

  public Expression getMaximal() {
    return (Expression) this.getChild(Expression.class, ScopedMemory.MAXIMAL);
  }

  public void setMaximal(Expression node) {
    super.setChild(ScopedMemory.MAXIMAL, node);
  }

  public static ScopedMemory newInstance(SModel sm, boolean init) {
    return (ScopedMemory) SModelUtil_new.instantiateConceptDeclaration("rtsj.structure.ScopedMemory", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ScopedMemory newInstance(SModel sm) {
    return ScopedMemory.newInstance(sm, false);
  }
}

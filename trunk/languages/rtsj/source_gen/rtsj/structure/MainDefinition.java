package rtsj.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MainDefinition extends BaseConcept {
  public static final String concept = "rtsj.structure.MainDefinition";
  public static final String MAIN_PRE_INIT = "mainPreInit";
  public static final String MAIN_POST_INIT = "mainPostInit";
  public static final String STARTING_MODE = "startingMode";

  public MainDefinition(SNode node) {
    super(node);
  }

  public ClassConcept getMainPreInit() {
    return (ClassConcept) this.getReferent(ClassConcept.class, MainDefinition.MAIN_PRE_INIT);
  }

  public void setMainPreInit(ClassConcept node) {
    super.setReferent(MainDefinition.MAIN_PRE_INIT, node);
  }

  public ClassConcept getMainPostInit() {
    return (ClassConcept) this.getReferent(ClassConcept.class, MainDefinition.MAIN_POST_INIT);
  }

  public void setMainPostInit(ClassConcept node) {
    super.setReferent(MainDefinition.MAIN_POST_INIT, node);
  }

  public Mode getStartingMode() {
    return (Mode) this.getReferent(Mode.class, MainDefinition.STARTING_MODE);
  }

  public void setStartingMode(Mode node) {
    super.setReferent(MainDefinition.STARTING_MODE, node);
  }

  public static MainDefinition newInstance(SModel sm, boolean init) {
    return (MainDefinition) SModelUtil_new.instantiateConceptDeclaration("rtsj.structure.MainDefinition", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MainDefinition newInstance(SModel sm) {
    return MainDefinition.newInstance(sm, false);
  }
}

package rtsj.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class InterThreadChannelPop extends Expression {
  public static final String concept = "rtsj.structure.InterThreadChannelPop";
  public static final String CHANNEL = "channel";

  public InterThreadChannelPop(SNode node) {
    super(node);
  }

  public InterThreadChannel getChannel() {
    return (InterThreadChannel) this.getReferent(InterThreadChannel.class, InterThreadChannelPop.CHANNEL);
  }

  public void setChannel(InterThreadChannel node) {
    super.setReferent(InterThreadChannelPop.CHANNEL, node);
  }

  public static InterThreadChannelPop newInstance(SModel sm, boolean init) {
    return (InterThreadChannelPop) SModelUtil_new.instantiateConceptDeclaration("rtsj.structure.InterThreadChannelPop", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InterThreadChannelPop newInstance(SModel sm) {
    return InterThreadChannelPop.newInstance(sm, false);
  }
}

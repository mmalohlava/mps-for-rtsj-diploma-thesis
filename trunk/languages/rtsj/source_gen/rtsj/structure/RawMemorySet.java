package rtsj.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.IntegerConstant;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.baseLanguage.structure.StringLiteral;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RawMemorySet extends Statement {
  public static final String concept = "rtsj.structure.RawMemorySet";
  public static final String VAR_TYPE = "varType";
  public static final String OFFSET = "offset";
  public static final String VALUE = "value";
  public static final String MEMORY = "memory";

  public RawMemorySet(SNode node) {
    super(node);
  }

  public RawMemoryType getVarType() {
    String value = super.getProperty(RawMemorySet.VAR_TYPE);
    return RawMemoryType.parseValue(value);
  }

  public void setVarType(RawMemoryType value) {
    super.setProperty(RawMemorySet.VAR_TYPE, value.getValueAsString());
  }

  public IntegerConstant getOffset() {
    return (IntegerConstant) this.getChild(IntegerConstant.class, RawMemorySet.OFFSET);
  }

  public void setOffset(IntegerConstant node) {
    super.setChild(RawMemorySet.OFFSET, node);
  }

  public Expression getValue() {
    return (Expression) this.getChild(Expression.class, RawMemorySet.VALUE);
  }

  public void setValue(Expression node) {
    super.setChild(RawMemorySet.VALUE, node);
  }

  public StringLiteral getMemory() {
    return (StringLiteral) this.getChild(StringLiteral.class, RawMemorySet.MEMORY);
  }

  public void setMemory(StringLiteral node) {
    super.setChild(RawMemorySet.MEMORY, node);
  }

  public static RawMemorySet newInstance(SModel sm, boolean init) {
    return (RawMemorySet) SModelUtil_new.instantiateConceptDeclaration("rtsj.structure.RawMemorySet", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RawMemorySet newInstance(SModel sm) {
    return RawMemorySet.newInstance(sm, false);
  }
}

package rtsj.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AllocateVariableStatement extends LocalVariableDeclaration {
  public static final String concept = "rtsj.structure.AllocateVariableStatement";
  public static final String MEMORY = "memory";
  public static final String ALLOCATER = "allocater";

  public AllocateVariableStatement(SNode node) {
    super(node);
  }

  public MemoryAreaReference getMemory() {
    return (MemoryAreaReference) this.getChild(MemoryAreaReference.class, AllocateVariableStatement.MEMORY);
  }

  public void setMemory(MemoryAreaReference node) {
    super.setChild(AllocateVariableStatement.MEMORY, node);
  }

  public Type getAllocater() {
    return (Type) this.getChild(Type.class, AllocateVariableStatement.ALLOCATER);
  }

  public void setAllocater(Type node) {
    super.setChild(AllocateVariableStatement.ALLOCATER, node);
  }

  public static AllocateVariableStatement newInstance(SModel sm, boolean init) {
    return (AllocateVariableStatement) SModelUtil_new.instantiateConceptDeclaration("rtsj.structure.AllocateVariableStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AllocateVariableStatement newInstance(SModel sm) {
    return AllocateVariableStatement.newInstance(sm, false);
  }
}

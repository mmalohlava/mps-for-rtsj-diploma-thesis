package rtsj.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;

public class ReleaseParametresSporadic_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_cfjx3m_a(editorContext, node);
  }

  private EditorCell createCollection_cfjx3m_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_cfjx3m_a");
    editorCell.addEditorCell(this.createCollection_cfjx3m_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_cfjx3m_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_cfjx3m_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_cfjx3m_d0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_cfjx3m_e0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_cfjx3m_f0(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_cfjx3m_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_cfjx3m_a0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConstant_cfjx3m_a0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_cfjx3m_b0a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_cfjx3m_c0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_cfjx3m_d0a(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_cfjx3m_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_cfjx3m_b0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConstant_cfjx3m_a1a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_cfjx3m_b1a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_cfjx3m_c1a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_cfjx3m_d1a(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_cfjx3m_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_cfjx3m_c0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConstant_cfjx3m_a2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_cfjx3m_b2a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_cfjx3m_c2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_cfjx3m_d2a(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_cfjx3m_e0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_cfjx3m_e0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConstant_cfjx3m_a4a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_cfjx3m_b4a(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_cfjx3m_c4a(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_cfjx3m_f0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_cfjx3m_f0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConstant_cfjx3m_a5a(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_cfjx3m_b5a(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "cost");
    editorCell.setCellId("Constant_cfjx3m_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_b0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "=");
    editorCell.setCellId("Constant_cfjx3m_b0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_d0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "ms");
    editorCell.setCellId("Constant_cfjx3m_d0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "deadline");
    editorCell.setCellId("Constant_cfjx3m_a1a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_b1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "=");
    editorCell.setCellId("Constant_cfjx3m_b1a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_d1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "ms");
    editorCell.setCellId("Constant_cfjx3m_d1a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_a2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "minInterval");
    editorCell.setCellId("Constant_cfjx3m_a2a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_b2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "=");
    editorCell.setCellId("Constant_cfjx3m_b2a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_d2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "ms");
    editorCell.setCellId("Constant_cfjx3m_d2a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_cfjx3m_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_a4a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "overrunHandler");
    editorCell.setCellId("Constant_cfjx3m_a4a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_b4a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "=");
    editorCell.setCellId("Constant_cfjx3m_b4a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_cfjx3m_a5a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "missHandler=");
    editorCell.setCellId("Constant_cfjx3m_a5a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_cfjx3m_c4a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("overrunHandler");
    provider.setNoTargetText("<no overrunHandler>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new ReleaseParametresSporadic_Editor._Inline_cfjx3m_a2e0());
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createRefCell_cfjx3m_b5a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("missHandler");
    provider.setNoTargetText("<no missHandler>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new ReleaseParametresSporadic_Editor._Inline_cfjx3m_a1f0());
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createRefNode_cfjx3m_c0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("cost");
    provider.setNoTargetText("<no cost>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createRefNode_cfjx3m_c1a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("deadline");
    provider.setNoTargetText("<no deadline>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createRefNode_cfjx3m_c2a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("minInterval");
    provider.setNoTargetText("<no minInterval>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_cfjx3m_a2e0 extends InlineCellProvider {
    public _Inline_cfjx3m_a2e0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_cfjx3m_a0c4a(editorContext, node);
    }

    private EditorCell createProperty_cfjx3m_a0c4a(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  public static class _Inline_cfjx3m_a1f0 extends InlineCellProvider {
    public _Inline_cfjx3m_a1f0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_cfjx3m_a0b5a(editorContext, node);
    }

    private EditorCell createProperty_cfjx3m_a0b5a(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name_1");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }
}

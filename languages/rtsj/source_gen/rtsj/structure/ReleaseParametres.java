package rtsj.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.ClassConcept;
import jetbrains.mps.baseLanguage.structure.IntegerConstant;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ReleaseParametres extends BaseConcept {
  public static final String concept = "rtsj.structure.ReleaseParametres";
  public static final String OVERRUN_HANDLER = "overrunHandler";
  public static final String MISS_HANDLER = "missHandler";
  public static final String COST = "cost";
  public static final String DEADLINE = "deadline";

  public ReleaseParametres(SNode node) {
    super(node);
  }

  public ClassConcept getOverrunHandler() {
    return (ClassConcept) this.getReferent(ClassConcept.class, ReleaseParametres.OVERRUN_HANDLER);
  }

  public void setOverrunHandler(ClassConcept node) {
    super.setReferent(ReleaseParametres.OVERRUN_HANDLER, node);
  }

  public ClassConcept getMissHandler() {
    return (ClassConcept) this.getReferent(ClassConcept.class, ReleaseParametres.MISS_HANDLER);
  }

  public void setMissHandler(ClassConcept node) {
    super.setReferent(ReleaseParametres.MISS_HANDLER, node);
  }

  public IntegerConstant getCost() {
    return (IntegerConstant) this.getChild(IntegerConstant.class, ReleaseParametres.COST);
  }

  public void setCost(IntegerConstant node) {
    super.setChild(ReleaseParametres.COST, node);
  }

  public IntegerConstant getDeadline() {
    return (IntegerConstant) this.getChild(IntegerConstant.class, ReleaseParametres.DEADLINE);
  }

  public void setDeadline(IntegerConstant node) {
    super.setChild(ReleaseParametres.DEADLINE, node);
  }

  public static ReleaseParametres newInstance(SModel sm, boolean init) {
    return (ReleaseParametres) SModelUtil_new.instantiateConceptDeclaration("rtsj.structure.ReleaseParametres", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ReleaseParametres newInstance(SModel sm) {
    return ReleaseParametres.newInstance(sm, false);
  }
}

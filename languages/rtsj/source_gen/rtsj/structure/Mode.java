package rtsj.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Mode extends BaseConcept implements INamedConcept {
  public static final String concept = "rtsj.structure.Mode";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String RUN_THREADS = "runThreads";
  public static final String STOP_THREADS = "stopThreads";
  public static final String CHANGE_PRIORITY = "changePriority";
  public static final String CHANGE_R_P = "changeRP";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Mode(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Mode.NAME);
  }

  public void setName(String value) {
    this.setProperty(Mode.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Mode.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Mode.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Mode.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Mode.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Mode.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Mode.VIRTUAL_PACKAGE, value);
  }

  public int getRunThreadsesCount() {
    return this.getChildCount(Mode.RUN_THREADS);
  }

  public Iterator<RealtimeThreadReference> runThreadses() {
    return this.children(RealtimeThreadReference.class, Mode.RUN_THREADS);
  }

  public List<RealtimeThreadReference> getRunThreadses() {
    return this.getChildren(RealtimeThreadReference.class, Mode.RUN_THREADS);
  }

  public void addRunThreads(RealtimeThreadReference node) {
    this.addChild(Mode.RUN_THREADS, node);
  }

  public void insertRunThreads(RealtimeThreadReference prev, RealtimeThreadReference node) {
    this.insertChild(prev, Mode.RUN_THREADS, node);
  }

  public int getStopThreadsesCount() {
    return this.getChildCount(Mode.STOP_THREADS);
  }

  public Iterator<RealtimeThreadReference> stopThreadses() {
    return this.children(RealtimeThreadReference.class, Mode.STOP_THREADS);
  }

  public List<RealtimeThreadReference> getStopThreadses() {
    return this.getChildren(RealtimeThreadReference.class, Mode.STOP_THREADS);
  }

  public void addStopThreads(RealtimeThreadReference node) {
    this.addChild(Mode.STOP_THREADS, node);
  }

  public void insertStopThreads(RealtimeThreadReference prev, RealtimeThreadReference node) {
    this.insertChild(prev, Mode.STOP_THREADS, node);
  }

  public int getChangePrioritiesCount() {
    return this.getChildCount(Mode.CHANGE_PRIORITY);
  }

  public Iterator<ModeChangePriority> changePriorities() {
    return this.children(ModeChangePriority.class, Mode.CHANGE_PRIORITY);
  }

  public List<ModeChangePriority> getChangePriorities() {
    return this.getChildren(ModeChangePriority.class, Mode.CHANGE_PRIORITY);
  }

  public void addChangePriority(ModeChangePriority node) {
    this.addChild(Mode.CHANGE_PRIORITY, node);
  }

  public void insertChangePriority(ModeChangePriority prev, ModeChangePriority node) {
    this.insertChild(prev, Mode.CHANGE_PRIORITY, node);
  }

  public int getChangeRPsCount() {
    return this.getChildCount(Mode.CHANGE_R_P);
  }

  public Iterator<ModeChangeRP> changeRPs() {
    return this.children(ModeChangeRP.class, Mode.CHANGE_R_P);
  }

  public List<ModeChangeRP> getChangeRPs() {
    return this.getChildren(ModeChangeRP.class, Mode.CHANGE_R_P);
  }

  public void addChangeRP(ModeChangeRP node) {
    this.addChild(Mode.CHANGE_R_P, node);
  }

  public void insertChangeRP(ModeChangeRP prev, ModeChangeRP node) {
    this.insertChild(prev, Mode.CHANGE_R_P, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Mode.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Mode.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Mode.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Mode.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Mode.SMODEL_ATTRIBUTE, node);
  }

  public static Mode newInstance(SModel sm, boolean init) {
    return (Mode) SModelUtil_new.instantiateConceptDeclaration("rtsj.structure.Mode", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Mode newInstance(SModel sm) {
    return Mode.newInstance(sm, false);
  }
}

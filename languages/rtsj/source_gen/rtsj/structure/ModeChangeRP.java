package rtsj.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ModeChangeRP extends BaseConcept {
  public static final String concept = "rtsj.structure.ModeChangeRP";
  public static final String THREAD = "thread";
  public static final String RELEASE_PARAMETRES = "releaseParametres";

  public ModeChangeRP(SNode node) {
    super(node);
  }

  public RealtimeThread getThread() {
    return (RealtimeThread) this.getReferent(RealtimeThread.class, ModeChangeRP.THREAD);
  }

  public void setThread(RealtimeThread node) {
    super.setReferent(ModeChangeRP.THREAD, node);
  }

  public ReleaseParametres getReleaseParametres() {
    return (ReleaseParametres) this.getChild(ReleaseParametres.class, ModeChangeRP.RELEASE_PARAMETRES);
  }

  public void setReleaseParametres(ReleaseParametres node) {
    super.setChild(ModeChangeRP.RELEASE_PARAMETRES, node);
  }

  public static ModeChangeRP newInstance(SModel sm, boolean init) {
    return (ModeChangeRP) SModelUtil_new.instantiateConceptDeclaration("rtsj.structure.ModeChangeRP", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ModeChangeRP newInstance(SModel sm) {
    return ModeChangeRP.newInstance(sm, false);
  }
}
